<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.Everlive.Sdk</name>
    </assembly>
    <members>
        <member name="T:Telerik.Everlive.Sdk.Core.DateTimeUnspecifiedHandling">
            <summary>
            Configures the handling of DateTime objects with Kind=Unspecified.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeUnspecifiedHandling.ThrowException">
            <summary>
            Throws an exception if a DateTime object with Kind=Unspecified is found.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeUnspecifiedHandling.TreatAsLocal">
            <summary>
            Treats all unspecified DateTime objects as local time.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeUnspecifiedHandling.TreatAsUtc">
            <summary>
            Treats all unspecified DateTime objects as universal time.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeValuesProcessing.NoChanges">
            <summary>
            No changes are applied to the DateTime objects.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeValuesProcessing.ConvertToLocal">
            <summary>
            All instances are converted to local time.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeValuesProcessing.ConvertToUtc">
            <summary>
            All instances are converted to UTC.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.EverliveAccount">
            <summary>
            This class represents the entry point to a single Everlive account.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveConnection.ExecuteRequest(Telerik.Everlive.Sdk.Core.Transport.Request,System.Action{Telerik.Everlive.Sdk.Core.Transport.Response})">
            <summary>
            Asynchronously executes a request against the Everlive service.
            </summary>
            <param name="request">The request to execute.</param>
            <param name="callback">The callback to invoke after the response is received.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveConnection.ExecuteQuery(Telerik.Everlive.Sdk.Core.Query.IEverliveQuery,System.Action{Telerik.Everlive.Sdk.Core.Transport.Response})">
            <summary>
            Asynchronously executes a query against the Everlive service.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="callback">The callback to invoke after the responce is received.</param>
            <param name="forceExecute">Whether to execute the request even if it is not required.</param>
            <returns>Returns true if the request resulted in an actual request to the Everlive service. Even if this is false, the callback will be invoked.</returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveConnection.ExecuteQuery(Telerik.Everlive.Sdk.Core.Query.IEverliveQuery,System.Int32)">
            <summary>
            Synchronously executes a query against the Everlive service.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="forceExecute">Whether to execute the request even if it is not required.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveConnection.GetApiVersionPath">
            <summary>
            Gets the api version path for the url.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveConnection.ExecuteQuery(Telerik.Everlive.Sdk.Core.Query.IEverliveQuery,System.Boolean,System.Action{Telerik.Everlive.Sdk.Core.Transport.Response})">
            <summary>
            Asynchronously executes a query against the Everlive service.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="callback">The callback to invoke after the responce is received.</param>
            <param name="forceExecute">Whether to execute the request even if it is not required.</param>
            <returns>Returns true if the request resulted in an actual request to the Everlive service. Even if this is false, the callback will be invoked.</returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveConnectionSettings.ApiVersion">
            <summary>
            Specifies the version of the Everlive API to use.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveConnectionSettings.ServiceUrl">
            <summary>
            Specifies the base URL for the Everlive service.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveConnectionSettings.UseHttps">
            <summary>
            Specifies whether HTTPS must be used for requests to the Everlive service.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAccountSettings.AuthorizationStrategy">
            <summary>
            The strategy to use when authenticationg to the Everlive REST service.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAccountSettings.AuthorizationData">
            <summary>
            The authorization data sent with each request. The value of this property depends on the authorization strategy. Example: for AccountKey
            authentication, this is the account key.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveApp.Users">
            <summary>
            Returns a UserManager instance working with instances of the default User type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveApp.Users(System.Type)">
            <summary>
            Returns a UserManager instance working with the specified type when serializing/deserializing entities.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveApp.Users``1">
            <summary>
            Returns a UserManager instance working with the specified type when serializing/deserializing entities.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveApp.Items(System.String)">
            <summary>
            
            </summary>
            <param name="serverTypeName"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveApp.AccessToken">
            <summary>
            The access token used to authenticate when making requests to Everlive. The token is set automatically
            when you log in.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.ApiKey">
            <summary>
            Gets/sets the API key of the app to work with.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.TestMode">
            <summary>
            Specifies whether requests to the Everlive service are executed in test mode.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.InboundDateTimeProcessing">
            <summary>
            Specifies how inbound DateTime values are processed.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.DateTimeUnspecifiedHandling">
            <summary>
            Specifies how DateTime values with Kind=Unspecified are handled.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.OutboundDateTimeProcessing">
            <summary>
            Specifies how outbound DateTime values are processed.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.SendSystemPropertiesToServer">
            <summary>
            Specifies whether system properties are sent to the server on CREATE or UPDATE operations. Note, that the server
            ignores those properties unless the request is authenticated with masterkey.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.UsersTypeName">
            <summary>
            The name of the Users built-in type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.RolesTypeName">
            <summary>
            The name of the Roles built-in type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.FilesTypeName">
            <summary>
            The name of the Files built-in type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.ServerCodeTypeName">
            <summary>
            The name of the ServerCode built-in type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.IdFieldName">
            <summary>
            The name of the field that represents the ID of the item.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.ModifiedAtFieldName">
            <summary>
            The name of the field that represents when the item was last modified.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.MultipleGetCountFieldName">
            <summary>
            The name of the field that contains the number of all items for the query(regardless of paging). Returned in GetByFilter requests.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.AnonymousRoleId">
            <summary>
            The ID of the role that represents anonymous users.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.OwnerRoleId">
            <summary>
            The ID of the system role that represents item owners.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.AsyncFacade`1.Execute(System.Action{`0})">
            <summary>
            Executes the request asynchronously and supplies the result to the specified callback. Any exceptions that occur during
            the operations are thrown. You should always wrap calls to this method in try-catch block.
            </summary>
            <param name="callback"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Everlive.Sdk.Core.Facades.AsyncFacade`1.ExecuteAsync" -->
        <!-- Badly formed XML comment ignored for member "M:Telerik.Everlive.Sdk.Core.Facades.AsyncFacade`1.ExecuteSync(System.Int32)" -->
        <member name="T:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1">
            <summary>
            
            </summary>
            <typeparam name="TResult">The type returned by the Execute and ExecuteAsync methods.</typeparam>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.TryExecute(System.Action{Telerik.Everlive.Sdk.Core.Result.RequestResult{`0}})">
            <summary>
            Executes the request asynchronously and supplies the result to the specified callback. Note, that this method does not
            throw exceptions, but wraps them in the result object. You can check if the request succeeded by checking the Success property.
            </summary>
            <param name="callback">The callbeck to invoke with the result of the request.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.Execute(System.Action{`0})">
            <summary>
            Executes the request asynchronously and supplies the result to the specified callback. Any exceptions that occur during
            the operations are thrown. You should always wrap calls to this method in try-catch block.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.TryExecuteAsync">
            <summary>
            Executes the request asynchronously. Note, that this method does not throw exceptions, but wraps them in the result object.
            You can check if the request succeeded by checking the Success property.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.ExecuteAsync" -->
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.TryExecuteSync(System.Int32)">
            <summary>
            Executes the request synchronously. Note, that this method does not throw exceptions, but wraps them in the result object.
            You can check if the request succeeded by checking the Success property. Calling this method blocks the calling thread.
            </summary>
            <param name="timeoutInMs"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.ExecuteSync(System.Int32)" -->
        <member name="T:Telerik.Everlive.Sdk.Core.Facades.RequestFacade`1">
            <summary>
            
            </summary>
            <typeparam name="TResult">The type returned by the Execute and ExecuteAsync methods.</typeparam>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.SingleTypeFacade`1.ContentTypeName">
            <summary>
            The name of the content type on the server.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.SingleTypeFacade`1.EntityType">
            <summary>
            The type of entity in the result of the response.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Interfaces.IFilterableFacade`3.Where(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Interfaces.IFilterableFacade`3.Where(System.String)">
            <summary>
            Adds the specified JavaScript condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Interfaces.IFilterableFacade`3.Where(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Base.Condition)">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="condition">The condition to append.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Delete.DeleteByFilterFacade`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Applies the specified filter to the query.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Delete.DeleteByFilterFacade`1.Where(System.String)">
            <summary>
            Applies the specified JavaScript condition as where clause.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Delete.DeleteByFilterFacade`1.Where(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Base.Condition)">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Delete.DeleteByFilterFacade`1.SetFilter(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.IFilteringDefinition)">
            <summary>
            Sets the current filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Delete.DeleteByIdFacade.Id">
            <summary>
            The ID of the item to delete.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Metadata.UsageStatisticsFacade.PeriodType">
            <summary>
            Specifies the resulted aggregated data to be grouped by day/week/month
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Metadata.UsageStatisticsFacade.ApiKey">
            <summary>
            Returns aggregated data for a specific application 
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Query(System.Linq.Expressions.Expression{System.Func{Linq.Linq.EverliveQueryable{`0},System.Linq.IQueryable{`0}}})">
            <summary>
            Applies the specified query to the request. Example: x.Query(q => q.Where(...).OrderBy(...))
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Where(System.String)">
            <summary>
            Adds the specified JavaScript condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Where(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Base.Condition)">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Applies the specified ordering to the query.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Applies the specified ordering to the query.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Skip(System.Int32)">
            <summary>
            Bypasses the specified number of items.
            </summary>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Take(System.Int32)">
            <summary>
            Returns the specified number of contiguous items.
            </summary>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.IncludeFields``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets the fields that are included in the result. Only the specified fields will be returned from the server. The Id field is always returned.
            In a single request, you can use either IncludeFields or ExcludeFields, not both.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.ExcludeFields``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets the fields that are excluded in the result. All the fields except the specified will be returned from the server. The Id field is always
            returned. In a single request, you can use either IncludeFields or ExcludeFields, not both.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.SetFilter(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.IFilteringDefinition)">
            <summary>
            Sets the current filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.SetSorting(Telerik.Everlive.Sdk.Core.Query.Definition.Sorting.ISortingDefinition)">
            <summary>
            Sets the current sorting.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.IncludeCount">
            <summary>
            Whether to include the count of all items in the result. Useful when paging is used.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetCountFacade`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetCountFacade`1.Where(System.String)">
            <summary>
            Adds the specified JavaScript condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetCountFacade`1.Where(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Base.Condition)">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Special.SetAclFacade.Acl">
            <summary>
            Gets or sets the acl.
            </summary>
            <value>The acl.</value>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByFilterFacade`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Applies the specified filter to the query.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByFilterFacade`1.Where(System.String)">
            <summary>
            Applies the specified JavaScript condition as where clause.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByFilterFacade`1.Where(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Base.Condition)">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByFilterFacade`1.SetFilter(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.IFilteringDefinition)">
            <summary>
            Sets the current filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByFilterFacade`1.Item">
            <summary>
            The item that will be updated.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByIdFacade.Id">
            <summary>
            The ID of the object to be updated.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByIdFacade.Item">
            <summary>
            The item that will be updated.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateMultipleFacade`1.Items">
            <summary>
            The items that will be updated.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateSinglePermissionFacade.Id">
            <summary>
            The ID of the object to be updated.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateSinglePermissionFacade.Item">
            <summary>
            The item that will be updated.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.GetById(System.Guid)">
            <summary>
            Returns an item by its ID.
            </summary>
            <param name="id">The ID of the item to read.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.GetById(System.String)">
            <summary>
            Returns an item by its ID.
            </summary>
            <param name="id">The ID of the item to read.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.GetAll">
            <summary>
            Returns all items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.Get">
            <summary>
            General method for reading items. Custom filter, sorting and paging can be applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.GetCount">
            <summary>
            Returns number of items. Custom filter can be applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.Update(Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject)">
            <summary>
            Updates the specified in the item properties.
            </summary>
            <param name="item">The item containing the new property/value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.Delete(System.Guid)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.Delete(System.String)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.Delete">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.DeleteAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.SecuredDataHandler`1.SetOwner(System.Guid,System.Guid)">
            <summary>
            Sets the owner of the item.
            </summary>
            <param name="itemId">The item id.</param>
            <param name="owner">The owner.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.SecuredDataHandler`1.SetAcl(System.Guid,Telerik.Everlive.Sdk.Core.Model.Base.AccessControlList)">
            <summary>
            Sets the acl of the item.
            </summary>
            <param name="itemId">The item id.</param>
            <param name="acl">The acl. Null will delete the item's acl.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Data``1">
            <summary>
            Returns a facade for working with Everlive data. The facade transforms data to/from Everlive using instances of the specified .NET class.
            The name of the Everlive content type to use is automatically extracted from the supplied .NET type.
            </summary>
            <typeparam name="T">The type of objects to use when communicationg with Everlive.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Data``1(System.String)">
            <summary>
            Returns a facade for working with Everlive data. The facade transforms data from/to entities of the specified type(generic type argument).
            The facade works with the specified content type.
            </summary>
            <typeparam name="T">The type of objects to use when communicationg with Everlive.</typeparam>
            <param name="typeName">The name of the Everlive content type to work with. This is the name of the content type as it appears in the Everlive backend.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Data(System.Type)">
            <summary>
            Returns a facade for working with Everlive data. The facade transforms data from/to entities of the specified type.
            The name of the Everlive content type to use is automatically extracted from the type argument.
            </summary>
            <param name="entityType">The type of objects to use when communicationg with Everlive.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Data(System.String)">
            <summary>
            Returns a facade for working with Everlive data. The facade transforms data from/to instances of Item. Server properties that
            are not available in the Item class can be accessed in a dicionary-like manner.
            </summary>
            <param name="typeName">The name of the Everlive content type to work with. This is the name of the content type as it appears in the Everlive backend.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Data(System.Type,System.String)">
            <summary>
            Returns a facade for working with Everlive data. The facade transforms data from/to entities of the specified type.
            The name of the Everlive content type to use is automatically extracted from the type argument.
            </summary>
            <param name="entityType">The type of objects to use when communicationg with Everlive.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Authentication">
            <summary>
            Returns a facade for working with authentication.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Users">
            <summary>
            Returns a default facade for working with users. The facade works with the built-in User class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Users(System.Type)">
            <summary>
            Returns a facade for working with users. The facade transforms data from/to entities of the specified type.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Users``1">
            <summary>
            Returns a facade for working with users. The facade transforms data from/to entities of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Files">
            <summary>
            Returns a facade for working with files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Push">
            <summary>
            Returns a facade for working with Everlive Push Notifications.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.Upload(Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField)">
            <summary>
            Uploads a single file to Everlive.
            </summary>
            <param name="fileField">The file to upload.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.Upload(System.Collections.Generic.IEnumerable{Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField})">
            <summary>
            Uploads multiplpe files to Everlive.
            </summary>
            <param name="files">The files to upload.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.UpdateFileContent(System.Guid,Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField)">
            <summary>
            Updates the content of the file with the specified ID.
            </summary>
            <param name="fileId">The file to update.</param>
            <param name="result">The new content for the file.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.GetFileDownloadUrl(System.Guid)">
            <summary>
            Returns the URL for the specified file.
            </summary>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.SetOwner(System.Guid,System.Guid)">
            <summary>
            Sets the owner of the item.
            </summary>
            <param name="itemId">The item id.</param>
            <param name="owner">The owner.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.SetAcl(System.Guid,Telerik.Everlive.Sdk.Core.Model.Base.AccessControlList)">
            <summary>
            Sets the acl of the item.
            </summary>
            <param name="fileId">The item id.</param>
            <param name="acl">The acl. Null will delete the item's acl.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.GetMe">
            <summary>
            Returns the currently logged user. Note that this only works if you have successfully logged in first using the Login method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password for the specified user.
            </summary>
            <param name="username"></param>
            <param name="currentPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.VerifyUser(System.String)">
            <summary>
            Verifies the email of a user by supplying a verification code.
            </summary>
            <param name="verificationCode"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.ResendVerificationEmail(System.Guid)">
            <summary>
            Resends the verification email for the user with the specified ID.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.ResendVerificationEmail(System.String)">
            <summary>
            Resends the verification email for the user with the specified username.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.ResetPasswordForUsername(System.String)">
            <summary>
            Initiates a password reset procedure for the user with the specified username.
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.ResetPasswordForEmail(System.String)">
            <summary>
            Initiates a password reset procedure for the user with the specified email.
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.SetNewPassword(System.String,System.Object,System.String,System.String)">
            <summary>
            Sets a new password for the user with the specified username, by using the secret question and secret answer.
            </summary>
            <param name="username">The username identifying the user.</param>
            <param name="secretQuestionId">The secret question ID of the user.</param>
            <param name="secretAnswer">The answer to the secret question.</param>
            <param name="newPassword">The new password to set.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.SetNewPassword(System.String,System.String)">
            <summary>
            Sets a new password for the user with the specified reset code.
            </summary>
            <param name="passwordResetCode"></param>
            <param name="newPassword"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.LinkAccount(System.Guid,System.String,Telerik.Everlive.Sdk.Core.Login.IdentityProvider)">
            <summary>
            Links the everlive user account with an account from the provider.
            </summary>
            <param name="userId">The user id.</param>
            <param name="accessToken">The access token from the provider.</param>
            <param name="provider">The provider name.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.UnlinkAccount(System.Guid,Telerik.Everlive.Sdk.Core.Login.IdentityProvider)">
            <summary>
            Unlinks the everlive user account with the account from provider.
            </summary>
            <param name="userId">The user id.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.LinkFacebookAccount(System.Guid,System.String)">
            <summary>
            Links the everlive user account with a Facebook account.
            </summary>
            <param name="userId">The user id.</param>
            <param name="accessToken">The Facebook access token.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.UnlinkFacebookAccount(System.Guid)">
            <summary>
            Unlinks the everlive user account and the Facebook account.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.LinkLiveIdAccount(System.Guid,System.String)">
            <summary>
            Links the everlive user account with a LiveID account.
            </summary>
            <param name="userId">The user id.</param>
            <param name="accessToken">The Facebook access token.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.UnlinkLiveIdAccount(System.Guid)">
            <summary>
            Unlinks the everlive user account and the LiveID account.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.LinkGoogleAccount(System.Guid,System.String)">
            <summary>
            Links the everlive user account with a Google account.
            </summary>
            <param name="userId">The user id.</param>
            <param name="accessToken">The Facebook access token.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.UnlinkGoogleAccount(System.Guid,System.String)">
            <summary>
            Unlinks the everlive user account and the Google account.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.CloudCodeHandler.SetCloudCode(System.String)">
            <summary>
            Sets the specified string as cloud code for the content type. The supplied string must be in UTF8 form.
            </summary>
            <param name="cloudCodeStringUtf8">The string to use as cloud code.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.CloudCodeHandler.SetCloudCode(System.IO.Stream)">
            <summary>
            Sets the data from the specified stream as cloud code for the content type.
            </summary>
            <param name="codeStream"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.CloudCodeHandler.RemoveCloudCode">
            <summary>
            Remove the cloud code for the content type.
            </summary>
            <param name="codeStream"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.CloudCodeHandler.GetCloudCode">
            <summary>
            Get the cloud code for the content type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.ContentTypeHandler.SetSecurityPolicy(Telerik.Everlive.Sdk.Core.Model.System.Metadata.Enums.SecurityPolicy)">
            <summary>
            Sets the security policy of the content type.
            </summary>
            <param name="securityPolicy">The new security policy.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.Create(Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice)">
            <summary>
            Registers a device for push notifications. Please note, that this method only registers the device in Everlive,
            so that it can be targeted when sending push notifications. This method does not set up the device for receiving
            push notifications.
            </summary>
            <param name="deviceRegistration">The device registration object.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.GetById(System.Guid)">
            <summary>
            Returns the registration for the device with the specified ID.
            </summary>
            <param name="deviceHardwareId">The unique hardware ID of the device.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.GetByHardwareId(System.String)">
            <summary>
            Returns the registration for the device with the specified hardware ID.
            </summary>
            <param name="deviceHardwareId">The unique hardware ID of the device.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.GetAll">
            <summary>
            Returns all items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.Get">
            <summary>
            Returns multiple device registrations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.GetCount">
            <summary>
            Returns number of device registrations. Custom filter can be applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.Update(Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice)">
            <summary>
            Updates the specified device registration.
            </summary>
            <param name="registration"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.UpdateByHardwareId(Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice)">
            <summary>
            Updates the specified device registration.
            </summary>
            <param name="registration"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.Delete(System.Guid)">
            <summary>
            Unregisters a device from receiving push notifications. The device will no longer receive any notifications.
            </summary>
            <param name="deviceHardwareId">The unique hardware ID of the device.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.DeleteByHardwareId(System.String)">
            <summary>
            Unregisters a device from receiving push notifications. The device will no longer receive any notifications.
            </summary>
            <param name="deviceHardwareId">The unique hardware ID of the device.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Interfaces.IPushHandler.GetDeviceHardwareId">
            <summary>
            Returns the unique hardware ID of the current device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Interfaces.IPushHandler.RegisterDevice(Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice)">
            <summary>
            Registers the specified device for push notifications.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Interfaces.IPushHandler.RegisterDevice(Telerik.Everlive.Sdk.Core.Model.System.Push.DeviceParameters)">
            <summary>
            Registers the current device for push notifications. The specified custom parameters are included in the registration.
            </summary>
            <param name="parameters">Custom parameters for the device registration.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Interfaces.IPushHandler.UnregisterDevice(System.String)">
            <summary>
            Unregisters the specified device from push notifications.
            </summary>
            <param name="deviceHardwareId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Interfaces.IPushHandler.UnregisterDevice">
            <summary>
            Unregisters the current device for push notifications.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linq.Linq.Bson.BsonSerializationInfo.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the BsonSerializationInfo class.
            </summary>
            <param name="elementName">The element name.</param>
            <param name="serializer">The serializer.</param>
            <param name="nominalType">The nominal type.</param>
            <param name="serializationOptions">The serialization options.</param>
        </member>
        <member name="M:Linq.Linq.Bson.BsonSerializationInfo.DeserializeValue(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Deserializes the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Linq.Linq.Bson.BsonSerializationInfo.SerializeValue(System.Object)">
            <summary>
            Serializes the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The serialized value.</returns>
        </member>
        <member name="P:Linq.Linq.Bson.BsonSerializationInfo.ElementName">
            <summary>
            Gets or sets the dotted element name.
            </summary>
        </member>
        <member name="P:Linq.Linq.Bson.BsonSerializationInfo.NominalType">
            <summary>
            Gets or sets the nominal type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.EndOfDocument">
            <summary>
            Not a real BSON type. Used to signal the end of a document.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Double">
            <summary>
            A BSON double.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.String">
            <summary>
            A BSON string.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Document">
            <summary>
            A BSON document.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Array">
            <summary>
            A BSON array.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Binary">
            <summary>
            BSON binary data.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Undefined">
            <summary>
            A BSON undefined value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.ObjectId">
            <summary>
            A BSON ObjectId.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Boolean">
            <summary>
            A BSON bool.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.DateTime">
            <summary>
            A BSON DateTime.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Null">
            <summary>
            A BSON null value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.RegularExpression">
            <summary>
            A BSON regular expression.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.JavaScript">
            <summary>
            BSON JavaScript code.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Symbol">
            <summary>
            A BSON symbol.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.JavaScriptWithScope">
            <summary>
            BSON JavaScript code with a scope (a set of variables with values).
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Int32">
            <summary>
            A BSON 32-bit integer.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Timestamp">
            <summary>
            A BSON timestamp.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Int64">
            <summary>
            A BSON 64-bit integer.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.MinKey">
            <summary>
            A BSON MinKey value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.MaxKey">
            <summary>
            A BSON MaxKey value.
            </summary>
        </member>
        <member name="M:Linq.Linq.EverliveQueryable`1.#ctor(Linq.Linq.EverliveQueryProvider)">
            <summary>
            Initializes a new instance of the EverliveQueryable class.
            </summary>
            <param name="provider">The query provider.</param>
        </member>
        <member name="M:Linq.Linq.EverliveQueryable`1.#ctor(Linq.Linq.EverliveQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the EverliveQueryable class.
            </summary>
            <param name="provider">The query provider.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Linq.Linq.EverliveQueryable`1.GetEnumerator">
            <summary>
            Gets an enumerator for the results of a MongoDB LINQ query.
            </summary>
            <returns>An enumerator for the results of a MongoDB LINQ query.</returns>
        </member>
        <member name="M:Linq.Linq.EverliveQueryProvider.#ctor(Telerik.Everlive.Sdk.Core.Managers.BaseManager)">
            <summary>
            Initializes a new instance of the EverliveQueryProvider class.
            </summary>
            <param name="collection">The collection being queried.</param>
        </member>
        <member name="M:Linq.Linq.EverliveQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new instance of EverliveQueryable{{T}} for this provider.
            </summary>
            <typeparam name="T">The type of the returned elements.</typeparam>
            <param name="expression">The query expression.</param>
            <returns>A new instance of EverliveQueryable{{T}}.</returns>
        </member>
        <member name="M:Linq.Linq.EverliveQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new instance EverliveQueryable{{T}} for this provider. Calls the generic CreateQuery{{T}} 
            to actually create the new EverliveQueryable{{T}} instance.
            </summary>
            <param name="expression">The query expression.</param>
            <returns>A new instance of EverliveQueryable{{T}}.</returns>
        </member>
        <member name="M:Linq.Linq.EverliveQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes a query.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The query expression.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Linq.Linq.EverliveQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes a query. Calls the generic method Execute{{T}} to actually execute the query.
            </summary>
            <param name="expression">The query expression.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.#ctor">
            <summary>
            Initializes a new instance of the ExpressionVisitor class.
            </summary>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits an Expression.
            </summary>
            <param name="node">The Expression.</param>
            <returns>The Expression (posibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits an Expression list.
            </summary>
            <param name="nodes">The Expression list.</param>
            <returns>The Expression list (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a BinaryExpression.
            </summary>
            <param name="node">The BinaryExpression.</param>
            <returns>The BinaryExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits a ConditionalExpression.
            </summary>
            <param name="node">The ConditionalExpression.</param>
            <returns>The ConditionalExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits a ConstantExpression.
            </summary>
            <param name="node">The ConstantExpression.</param>
            <returns>The ConstantExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits an ElementInit.
            </summary>
            <param name="node">The ElementInit.</param>
            <returns>The ElementInit (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitElementInitList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits an ElementInit list.
            </summary>
            <param name="nodes">The ElementInit list.</param>
            <returns>The ElementInit list (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits an InvocationExpression.
            </summary>
            <param name="node">The InvocationExpression.</param>
            <returns>The InvocationExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits a LambdaExpression.
            </summary>
            <param name="node">The LambdaExpression.</param>
            <returns>The LambdaExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits a ListInitExpression.
            </summary>
            <param name="node">The ListInitExpression.</param>
            <returns>The ListInitExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits a MemberExpression.
            </summary>
            <param name="node">The MemberExpression.</param>
            <returns>The MemberExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits a MemberAssignment.
            </summary>
            <param name="node">The MemberAssignment.</param>
            <returns>The MemberAssignment (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits a MemberBinding.
            </summary>
            <param name="node">The MemberBinding.</param>
            <returns>The MemberBinding (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits a MemberBinding list.
            </summary>
            <param name="nodes">The MemberBinding list.</param>
            <returns>The MemberBinding list (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits a MemberInitExpression.
            </summary>
            <param name="node">The MemberInitExpression.</param>
            <returns>The MemberInitExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits a MemberListBinding.
            </summary>
            <param name="node">The MemberListBinding.</param>
            <returns>The MemberListBinding (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits a MemberMemberBinding.
            </summary>
            <param name="node">The MemberMemberBinding.</param>
            <returns>The MemberMemberBinding (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits a MethodCallExpression.
            </summary>
            <param name="node">The MethodCallExpression.</param>
            <returns>The MethodCallExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits a NewExpression.
            </summary>
            <param name="node">The NewExpression.</param>
            <returns>The NewExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits a NewArrayExpression.
            </summary>
            <param name="node">The NewArrayExpression.</param>
            <returns>The NewArrayExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits a ParameterExpression.
            </summary>
            <param name="node">The ParameterExpression.</param>
            <returns>The ParameterExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits a TypeBinaryExpression.
            </summary>
            <param name="node">The TypeBinaryExpression.</param>
            <returns>The TypeBinaryExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a UnaryExpression.
            </summary>
            <param name="node">The UnaryExpression.</param>
            <returns>The UnaryExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionNormalizer.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the ExpressionNormalizer class.
            </summary>
            <param name="expression">The expression to be evaluated.</param>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionNormalizer.Normalize(System.Linq.Expressions.Expression)">
            <summary>
            Normalizes C# and VB expression trees.
            </summary>
            <param name="node">The expression to normalize.</param>
            <returns>The normalized expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionNormalizer.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a BinaryExpression.
            </summary>
            <param name="node">The BinaryExpression.</param>
            <returns>The BinaryExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionNormalizer.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a UnaryExpression.
            </summary>
            <param name="node">The UnaryExpression.</param>
            <returns>The UnaryExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionParameterReplacer.#ctor(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the ExpressionParameterReplacer class.
            </summary>
            <param name="fromParameter">The parameter to be replaced.</param>
            <param name="toExpression">The expression that replaces the parameter.</param>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionParameterReplacer.ReplaceParameter(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Replaces all occurences of one parameter with a different parameter.
            </summary>
            <param name="node">The expression containing the parameter that should be replaced.</param>
            <param name="fromParameter">The from parameter.</param>
            <param name="toExpression">The expression that replaces the parameter.</param>
            <returns>The expression with all occurrences of the parameter replaced.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionParameterReplacer.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Replaces the from parameter with the two parameter if it maches.
            </summary>
            <param name="node">The node.</param>
            <returns>The parameter (replaced if it matched).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.#ctor">
            <summary>
            Initializes a new instance of the ExpressionVisitor class.
            </summary>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits an Expression.
            </summary>
            <param name="node">The Expression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits an Expression list.
            </summary>
            <param name="nodes">The Expression list.</param>
            <returns>The result of visiting the Expressions.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a BinaryExpression.
            </summary>
            <param name="node">The BinaryExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits a ConditionalExpression.
            </summary>
            <param name="node">The ConditionalExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits a ConstantExpression.
            </summary>
            <param name="node">The ConstantExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits an ElementInit.
            </summary>
            <param name="node">The ElementInit.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitElementInitList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits an ElementInit list.
            </summary>
            <param name="nodes">The ElementInit list.</param>
            <returns>The result of visiting the Expressions.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits an InvocationExpression.
            </summary>
            <param name="node">The InvocationExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits a LambdaExpression.
            </summary>
            <param name="node">The LambdaExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits a ListInitExpression.
            </summary>
            <param name="node">The ListInitExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits a MemberExpression.
            </summary>
            <param name="node">The MemberExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits a MemberAssignment.
            </summary>
            <param name="node">The MemberAssignment.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits a MemberBinding.
            </summary>
            <param name="node">The MemberBinding.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits a MemberBinding list.
            </summary>
            <param name="nodes">The MemberBinding list.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits a MemberInitExpression.
            </summary>
            <param name="node">The MemberInitExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits a MemberListBinding.
            </summary>
            <param name="node">The MemberListBinding.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits a MemberMemberBinding.
            </summary>
            <param name="node">The MemberMemberBinding.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits a MethodCallExpression.
            </summary>
            <param name="node">The MethodCallExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits a NewExpression.
            </summary>
            <param name="node">The NewExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits a NewArrayExpression.
            </summary>
            <param name="node">The NewArrayExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits a ParameterExpression.
            </summary>
            <param name="node">The ParameterExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits a TypeBinaryExpression.
            </summary>
            <param name="node">The TypeBinaryExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a UnaryExpression.
            </summary>
            <param name="node">The UnaryExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.LinqToMongo.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains all of the specified values.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence in which to locate the values.</param>
            <param name="values">The values to locate in the sequence.</param>
            <returns>True if the sequence contains all of the specified values.</returns>
        </member>
        <member name="M:Linq.Linq.LinqToMongo.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any of the specified values.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence in which to locate the values.</param>
            <param name="values">The values to locate in the sequence.</param>
            <returns>True if the sequence contains any of the specified values.</returns>
        </member>
        <member name="M:Linq.Linq.LinqToMongo.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a specified value is contained in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="value">The value to locate in the sequence.</param>
            <param name="source">A sequence in which to locate the values.</param>
            <returns>True if the value is contained in the sequence.</returns>
        </member>
        <member name="M:Linq.Linq.LinqToMongo.Inject(Linq.Linq.Driver.IMongoQuery)">
            <summary>
            Injects a low level IMongoQuery into a LINQ where clause. Can only be used in LINQ queries.
            </summary>
            <param name="query">The low level query.</param>
            <returns>Throws an InvalidOperationException if called.</returns>
        </member>
        <member name="M:Linq.Linq.Translators.MongoQueryTranslator.Translate(System.Linq.IQueryable)">
            <summary>
            Translate a MongoDB LINQ query.
            </summary>
            <param name="query">The MongoDB LINQ query.</param>
            <returns>A TranslatedQuery.</returns>
        </member>
        <member name="M:Linq.Linq.Translators.MongoQueryTranslator.Translate(Linq.Linq.EverliveQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Translate a MongoDB LINQ query.
            </summary>
            <param name="provider">The MongoDB query provider.</param>
            <param name="expression">The LINQ query expression.</param>
            <returns>A TranslatedQuery.</returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByClause">
            <summary>
            Represents an order by clause.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByClause.#ctor(System.String,Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByDirection)">
            <summary>
            Initializes an instance of the OrderByClause class.
            </summary>
            <param name="key">An expression identifying the key of the order by clause.</param>
            <param name="direction">The direction of the order by clause.</param>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByClause.Key">
            <summary>
            Gets the lambda expression identifying the key of the order by clause.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByClause.Direction">
            <summary>
            Gets the direction of the order by clause.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByDirection.Ascending">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByDirection.Descending">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="M:Linq.Linq.Translators.PartialEvaluator.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees.
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:Linq.Linq.Translators.PartialEvaluator.Evaluate(System.Linq.Expressions.Expression,System.Linq.IQueryProvider)">
            <summary>
            Performs evaluation and replacement of independent sub-trees.
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="queryProvider">The query provider when the expression is a LINQ query (can be null).</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="T:Linq.Linq.Translators.PartialEvaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="M:Linq.Linq.Translators.PredicateTranslator.#ctor(Linq.Linq.Utils.BsonSerializationInfoHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Linq.Linq.Translators.PredicateTranslator"/> class.
            </summary>
            <param name="serializationHelper">The serialization helper.</param>
        </member>
        <member name="M:Linq.Linq.Translators.PredicateTranslator.BuildQuery(System.Linq.Expressions.Expression)">
            <summary>
            Builds an IMongoQuery from an expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>An IMongoQuery.</returns>
        </member>
        <member name="M:Linq.Linq.Translators.TranslatedQuery.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the MongoLinqQuery class.
            </summary>
            <param name="collection">The collection being queried.</param>
            <param name="documentType">The document type being queried.</param>
        </member>
        <member name="M:Linq.Linq.Translators.TranslatedQuery.Execute(Telerik.Everlive.Sdk.Core.Managers.BaseManager)">
            <summary>
            Executes a query that returns a single result (overridden by subclasses).
            </summary>
            <returns>The result of executing the query.</returns>
        </member>
        <member name="P:Linq.Linq.Translators.TranslatedQuery.DocumentType">
            <summary>
            Get the document type being queried.
            </summary>
        </member>
        <member name="M:Linq.Linq.Translators.SelectQuery.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the MongoLinqFindQuery class.
            </summary>
            <param name="collection">The collection being queried.</param>
            <param name="documentType">The document type.</param>
        </member>
        <member name="M:Linq.Linq.Translators.SelectQuery.BuildQuery">
            <summary>
            Creates an IMongoQuery from the where clause (returns null if no where clause was specified).
            </summary>
            <returns>An IMongoQuery.</returns>
        </member>
        <member name="M:Linq.Linq.Translators.SelectQuery.Execute(Telerik.Everlive.Sdk.Core.Managers.BaseManager)">
            <summary>
            Executes the translated Find query.
            </summary>
            <returns>The result of executing the translated Find query.</returns>
        </member>
        <member name="M:Linq.Linq.Translators.SelectQuery.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Translates a LINQ query expression tree.
            </summary>
            <param name="expression">The LINQ query expression tree.</param>
        </member>
        <member name="P:Linq.Linq.Translators.SelectQuery.Projection">
            <summary>
            Gets the Expression that defines the projection (or null if not specified).
            </summary>
        </member>
        <member name="P:Linq.Linq.Translators.SelectQuery.Skip">
            <summary>
            Gets the Expression that defines how many documents to skip (or null if not specified).
            </summary>
        </member>
        <member name="P:Linq.Linq.Translators.SelectQuery.Take">
            <summary>
            Gets the Expression that defines how many documents to take (or null if not specified);
            </summary>
        </member>
        <member name="P:Linq.Linq.Translators.SelectQuery.Where">
            <summary>
            Gets the LambdaExpression that defines the where clause (or null if not specified).
            </summary>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression,Linq.Linq.Bson.BsonSerializationInfo})">
            <summary>
            Initializes a new instance of the BsonSerializationInfoFinder class.
            </summary>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a BinaryExpression.
            </summary>
            <param name="node">The BinaryExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits a LambdaExpression.
            </summary>
            <param name="node">The LambdaExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits a MemberExpression.
            </summary>
            <param name="node">The MemberExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits a MethodCallExpression.
            </summary>
            <param name="node">The MethodCallExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits a ParameterExpression.
            </summary>
            <param name="node">The ParameterExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a UnaryExpression.
            </summary>
            <param name="node">The UnaryExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoHelper.GetSerializationInfo(System.Linq.Expressions.Expression)">
            <summary>
            Gets the serialization info for the given expression.
            </summary>
            <param name="node">The expression.</param>
            <returns>The serialization info.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoHelper.GetItemSerializationInfo(System.String,Linq.Linq.Bson.BsonSerializationInfo)">
            <summary>
            Gets the item serialization info.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="serializationInfo">The serialization info.</param>
            <returns>The item BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoHelper.RegisterExpressionSerializer(System.Linq.Expressions.Expression)">
            <summary>
            Registers a serializer with the given expression. 
            </summary>
            <param name="node">The expression.</param>
            <param name="serializer">The serializer.</param>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoHelper.SerializeValue(Linq.Linq.Bson.BsonSerializationInfo,System.Object)">
            <summary>
            Serializes the value given the serialization information.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="value">The value.</param>
            <returns>A BsonValue representing the value serialized using the serializer.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.TypeHelper.IsAssignableFrom(System.Type,System.Type)">
            <summary>Determines whether an instance of the current <see cref="T:System.Type"/>
            can be assigned from an instance of the specified Type.
            Works the same way as Type.IsAssignableFrom but also adds support for generics
            </summary>
            <param name="extendType">The extended type to check if is assignable from the given <paramref name="baseType"/></param>
            <param name="baseType">The base type</param>
            <returns></returns>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Login.PrincipalType.User">
            <summary>
            Used when logging in as an Everlive user.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Login.PrincipalType.App">
            <summary>
            Used when logging in as a third party app.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Login.PrincipalType.Master">
            <summary>
            Used when logging in with full access.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.ItemsManager`1.CreateNew(`0,System.Action{Telerik.Everlive.Sdk.Core.Model.Result.CreateResultItem})">
            <summary>
            Creates a new item.
            </summary>
            <param name="newItem"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.ItemsManager`1.CreateMultiple(System.Collections.Generic.IEnumerable{`0},System.Action{System.Collections.Generic.IEnumerable{Telerik.Everlive.Sdk.Core.Model.Result.CreateResultItem}})">
            <summary>
            Creates multiple new items
            </summary>
            <param name="items"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManager.GetFileDownloadUrl(System.Guid)">
            <summary>
            Returns the download URL for the specified file.
            </summary>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManager.UploadSingle(Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField,System.Action{Telerik.Everlive.Sdk.Core.Model.Result.CreateResultItem})">
            <summary>
            Uploads a single file to the Everlive service.
            </summary>
            <param name="fileField">The file to upload.</param>
            <param name="callback">The callback invoked when the operation completes.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManager.UploadMultiple(System.Collections.Generic.IEnumerable{Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField},System.Action{System.Collections.Generic.IEnumerable{Telerik.Everlive.Sdk.Core.Model.Result.CreateResultItem}})">
            <summary>
            Uploads multiplpe files to the Everlive service.
            </summary>
            <param name="files">The files to upload.</param>
            <param name="callback">The callback invoked when the operation completes.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManager.UpdateFileContent(System.Guid,Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField,System.Action{System.Int32})">
            <summary>
            Updates the content of the file with the specified ID.
            </summary>
            <param name="fileId">The file to update.</param>
            <param name="result">The new content for the file.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManager.UploadSingleAsync(Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField)">
            <summary>
            Uploads a single file to the Everlive service.
            </summary>
            <param name="fileField">The file to upload.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManager.UploadMultipleAsync(System.Collections.Generic.IEnumerable{Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField})">
            <summary>
            Uploads multiplpe files to the Everlive service.
            </summary>
            <param name="files">The files to upload.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManager.UpdateFileContentAsync(System.Guid,Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField)">
            <summary>
            Updates the content of the file with the specified ID.
            </summary>
            <param name="fileId">The file to update.</param>
            <param name="result">The new content for the file.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManagerRaw.GetFileDownloadUrl(System.Guid)">
            <summary>
            Returns the download URL for the specified file.
            </summary>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManagerRaw.UploadSingle(Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField,System.Action{Telerik.Everlive.Sdk.Core.Result.CreateSingleResult})">
            <summary>
            Uploads a single file to the Everlive service.
            </summary>
            <param name="fileField">The file to upload.</param>
            <param name="callback">The callback invoked when the operation completes.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManagerRaw.UploadMultiple(System.Collections.Generic.IEnumerable{Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField},System.Action{Telerik.Everlive.Sdk.Core.Result.CreateMultipleResult})">
            <summary>
            Uploads multiplpe files to the Everlive service.
            </summary>
            <param name="files">The files to upload.</param>
            <param name="callback">The callback invoked when the operation completes.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManagerRaw.UpdateFileContent(System.Guid,Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField,System.Action{Telerik.Everlive.Sdk.Core.Result.UpdateResult})">
            <summary>
            Updates the content of the file with the specified ID.
            </summary>
            <param name="fileId">The file to update.</param>
            <param name="result">The new content for the file.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManagerRaw.UploadSingleAsync(Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField)">
            <summary>
            Uploads a single file to the Everlive service.
            </summary>
            <param name="fileField">The file to upload.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManagerRaw.UploadMultipleAsync(System.Collections.Generic.IEnumerable{Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField})">
            <summary>
            Uploads multiplpe files to the Everlive service.
            </summary>
            <param name="files">The files to upload.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.FilesManagerRaw.UpdateFileContentAsync(System.Guid,Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField)">
            <summary>
            Updates the content of the file with the specified ID.
            </summary>
            <param name="fileId">The file to update.</param>
            <param name="result">The new content for the file.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.ItemsManagerRaw`1.CreateNew(`0,System.Action{Telerik.Everlive.Sdk.Core.Result.CreateSingleResult})">
            <summary>
            Creates a new item.
            </summary>
            <param name="newItem"></param>
            <param name="callback"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Managers.ItemsManagerRaw`1.CreateMultiple(System.Collections.Generic.IEnumerable{`0},System.Action{Telerik.Everlive.Sdk.Core.Result.CreateMultipleResult})">
            <summary>
            Creates multiple new items with a single request to the server
            </summary>
            <param name="items"></param>
            <param name="callback"></param>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.Base.ContentTypeAttribute">
            <summary>
            This attribute is used to explicitly set properties for user generated classes which 
            correspond to Everlive Content Types
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.ContentTypeAttribute.Name">
            <summary>
            The name of the Everlive Content Type.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event for the specified property.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.OnPropertyChanged(System.String)">
            <summary>
            Raises a PropertyChanged event for the specified property.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises a PropertyChanged event for the specified property. Example: this.OnPropertyChanged(() => this.Name);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets the specified value to the specified field. Raises a PropertyChanged event if the previous value is different than the new.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to set value to.</param>
            <param name="value">The new value.</param>
            <param name="propertyName">The name of the property to raise PropertyChanged for.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.SetProperty``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Sets the specified value to the specified field. Raises a PropertyChanged event if the previous value is different than the new.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to set value to.</param>
            <param name="value">The new value.</param>
            <param name="propertyExpression">The name of the property to raise PropertyChanged for. Example: this.SetProperty(ref this.name, value, () => this.Name);</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event with the specified args. Can be overriden to raise the event in the UI thread, when necessary.
            </summary>
            <param name="args">Event args to be used.</param>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.Id">
            <summary>
            The unique ID of the item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.CreatedAt">
            <summary>
            The date when the item was created.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IDataItem.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the dynamic property with the specified name.
            </summary>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IDataItem.GetValue``1(System.String,``0)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="defaultValue">The default value to return if the specified property is not found.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IDataItem.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IDataItem.RemoveValue(System.String)">
            <summary>
            Removes the specified dynamic property from the object.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject">
            <summary>
            Represents an object that supports updating.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject.GetJsonUpdateObject(System.Boolean,Telerik.Everlive.Sdk.Core.Serialization.ISerializationSettings)">
            <summary>
            Returns the JSON object to send as update to the Everlive service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject.MarkObjectAsNotModified">
            <summary>
            Marks the whole object as not modified.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject.MarkObjectAsDirty">
            <summary>
            Marks all the properties of the current object as modified.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject.MarkPropertyAsNotModified(System.String)">
            <summary>
            Clears the modified flag for the specified property.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject.IsObjectModified">
            <summary>
            Returns whether the object has been modified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the dynamic property with the specified name.
            </summary>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.GetValue``1(System.String,``0)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="defaultValue">The default value to return if the specified property is not found.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.RemoveValue(System.String)">
            <summary>
            Removes the specified property from the object.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.MarkObjectAsNotModified">
            <summary>
            Marks the whole object as unmodified. After this is called, all properties are considered unchanged.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.MarkPropertyAsDirty(System.String)">
            <summary>
            Marks the specified property as modified.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.MarkPropertyAsDirty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Marks the specified property as modified.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.InitializeDefaultValues">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.CreatedBy">
            <summary>
            The ID of the Everlive user that created the item. Guid.Empty if the item was not created by a particular Everlive user(e.g. created from the Everlive backend).
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.ModifiedBy">
            <summary>
            The ID of the Everlive user that created the item. Guid.Empty if the item was not modified by a particular Everlive user(e.g. edited from the Everlive backend).
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.Owner">
            <summary>
            The ID of the owner of the item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.ModifiedAt">
            <summary>
            The date when the item was last modified.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.Acl">
            <summary>
            Holds granular permissions for the item. This property is only returned from the server for the owner of the item or
            when using masterkey authentication.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.Meta">
            <summary>
            Holds additional data for the item. This property is read-only.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.CustomProperties">
            <summary>
            Holds all properties that are returned by the Everlive service but are not mapped to a static .NET property.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.IsObjectModified">
            <summary>
            Returns whether the object has been modified. Note, that this does not check if JToken properties have been modified.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItemMetadata.Permissions">
            <summary>
            Holds the permissions on the item for the user who requested the item. This is null if the item was requested with
            authentication different than user.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DynamicData.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the dynamic property with the specified name.
            </summary>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DynamicData.GetValue``1(System.String,``0)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="defaultValue">The default value to return if the specified property is not found.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DynamicData.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.ClientSerializationError">
            <summary>
            Occurs whenever a serialization problem is encountered. This error means that the server returned the response successfully, but it was not deserialized properly.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.UnknownClientError">
            <summary>
            Occurs whenever a client error is thrown. This error means that the server returned the response successfully, but some error occured internally in the SDK.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.SynchronousRequestTimedOut">
            <summary>
            Occurs when a synchronous request to the Everlive service times out.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.NoResponse">
            <summary>
            Occurs when the Everlive service does not respond.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.UnknownServerError">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.UserAlreadyExists">
            <summary>
            Occurs if you try to register a new user with username that is already in the system.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.NoPasswordSpecified">
            <summary>
            Occures if you try to register a user but you have not specified a password.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.NoUsernameSpecified">
            <summary>
            Occures if you try to register a user but you have not specified a username.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.InvalidPassword">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.WrongUsernameOrPassword">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.UserNotFound">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.InvalidRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MethodNotSupported">
            <summary>
            Occurs when the specified HTTP method is not supported by the endpoint.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.AccessDenied">
            <summary>
            Occurs whenever you try to access a resource on which you hav eno permissions.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MissingApiVersion">
            <summary>
            Occurs whenever you make request to the Everlive service without specifying the API version. This should not happen when working through the SDK.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MissingApiKey">
            <summary>
            Occurs whenever you make request to the Everlive service without specifying the API key. This should not happen when working through the SDK.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.InvalidApiKey">
            <summary>
            Occurs whenever you make request to the Everlive service with an invalid API key.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.InvalidFilterExpression">
            <summary>
            Occurs if you supply an invalid filter expression while querying objects.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.InvalidSortExpression">
            <summary>
            Occurs if you supply an invalid sort expression while querying objects.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MissingOrInvalidContentTypeHeader">
            <summary>
            Occurs if the content-type header of the request is required, but is missing or invalid.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.ContentTypeNotFound">
            <summary>
            Occurs when you make request for a non-existing content type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MissingFileContentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MissingOrInvalidFileContent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.Base.PermissionsInfo">
            <summary>
            Holds simple permissions.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.PermissionsInfo.CanUpdate">
            <summary>
            Indicates whether the current user can UPDATE the item.
            </summary>
            <value>Whether the current user can update the item.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.PermissionsInfo.CanDelete">
            <summary>
            Indicates whether the current user can DELETE the item.
            </summary>
            <value>Whether the current user can delete the item.</value>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableProperty.IsModified">
            <summary>
            Returns whether the property is modified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableProperty.GetJsonUpdateObject">
            <summary>
            Returns the JSON update object that reflexes the changes made to the property.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.Result.CreateResultItem">
            <summary>
            An instance of this type is returned by CREATE operations.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.AccessToken">
            <summary>
            Represents an access token that you can use to make requests to the Everlive service. This object is usually the result
            of a successful login request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.AccessToken.Token">
            <summary>
            The token string itself.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.AccessToken.TokenType">
            <summary>
            The type of the token as per OAuth 2.0 specification. Currently we only use "bearer" for token type.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.AccessToken.ExpirationDate">
            <summary>
            The date and time when the token expires. After a token is expired, you cannot use it to make requests.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.AccessToken.PrincipalId">
            <summary>
            The ID of the entity associated with the token. If you logged in as a user, this is the user ID.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.Date">
            <summary>
            The date of the usage metrics info.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.ApiKey">
            <summary>
            The API key.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.InboundTraffic">
            <summary>
            The inbound traffic in bytes for the period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.OutboundTraffic">
            <summary>
            The outbound traffic in bytes for the period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.OutboundTrafficCumulative">
            <summary>
            The cumulative outbound traffic in bytes.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.InboundTrafficCumulative">
            <summary>
            The cumulative inbound traffic in bytes.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.Bandwidth">
            <summary>
            Bandwidth in bytes.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.BandwidthCumulative">
            <summary>
            Cumulative bandwidth in bytes.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.RequestsCount">
            <summary>
            The number of requests for the period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.RequestsCountCumulative">
            <summary>
            The cumulative number of requests.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.DataStorage">
            <summary>
            The data storage, as it was at the end of the period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.DataStorageChange">
            <summary>
            The difference between the data storage for the current period and the data storage for the previous period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.FileStorage">
            <summary>
            The file storage, as it was at the end of the period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.FileStorageChange">
            <summary>
            The difference between the file storage for the current period and the file storage for the previous period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.DownloadedFile.Stream">
            <summary>
            The download stream.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.DownloadedFile.Length">
            <summary>
            The size of the downloaded file in bytes.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.DownloadedFile.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.File">
            <summary>
            Represents a file stored in Everlive. You can inherit from this class and define your custom file properties.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.File.Filename">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.File.ContentType">
            <summary>
            The content type of the file e.g. "image/jpg".
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.File.Size">
            <summary>
            The size of the file in bytes.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application">
            <summary>
            Represents an application in Everlive.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.Name">
            <summary>
            The name of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.Title">
            <summary>
            The title of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.APIKey">
            <summary>
            Api key of the application.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.APIMasterKey">
            <summary>
            The Api master key of the application.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.DefaultRoleId">
            <summary>
            The id of the default role in the application.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.Description">
            <summary>
            The description string of the application.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.FilesContentTypeId">
            <summary>
            The id of the files content type.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.IsAutogeneratedSample">
            <summary>
            Shows whether the application is an autogenerated sample.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.IsSample">
            <summary>
            Shows whether the application is a sample.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.Owner">
            <summary>
            Shows the owner of the application.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.CustomSettings">
            <summary>
            Custom settings for the application. You can store custom application properties here.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog">
            <summary>
            Represents the log information that is stored from the execution of server code
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.ResultType">
            <summary>
            Gets or sets the type of the result.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.ConsoleOutput">
            <summary>
            Gets or sets the console output.
            </summary>
            <value>The console output.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.RequestDate">
            <summary>
            Gets or sets the request date.
            </summary>
            <value>The request date.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType">
            <summary>
            Represents a content type of an application in Everlive.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.Name">
            <summary>
            The name of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.Title">
            <summary>
            The title of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.ApplicationId">
            <summary>
            The id of the application this content type belongs to.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.Kind">
            <summary>
            The content type kind. For example whether it is a user defined or a system content type.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.CustomSettings">
            <summary>
            Custom settings for the application. You can store custom application properties here.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.EmailTemplate.FromEmail">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.System.BuiltInTemplate.Friends">
            <summary>
            The friends sample app.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.EmailsSendMode">
            <summary>
            Used to to show the type of the event - before/after for which the log was created
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.EventType">
            <summary>
            Used to to show the type of the event - before/after for which the log was created
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.FieldDataType">
            <summary>
            The possible field data types.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ObjectKind">
            <summary>
            Represents the ownership type for an Everlive metadata object.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ObjectKind.System">
            <summary>
            A system object.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ObjectKind.UserDefined">
            <summary>
            A user-defined object.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ResultType">
            <summary>
            Shows the result type of the server code that was executed
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.Name">
            <summary>
            The name of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.Title">
            <summary>
            The title of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.Kind">
            <summary>
            The kind of the field (System, UserDefined, etc).
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.DataType">
            <summary>
            The data type of the field.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.IsArray">
            <summary>
            Shows whether the field contains an array.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.TargetTypeId">
            <summary>
            If the field is a relation type field this is the id of the type that the relation is to.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.ContentTypeId">
            <summary>
            The id of the content type this field belongs to.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.CustomSettings">
            <summary>
            Custom settings for the application. You can store custom application properties here.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Role">
            <summary>
            Represents a role in Everlive.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Role.Name">
            <summary>
            The name of the role.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Role.Title">
            <summary>
            The title of the role.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushNotification.Filter">
            <summary>
            Specifies a device filter for the notification. Using this filter you can target only the devices you want.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushNotification.Message">
            <summary>
            Specifies a message to send as push notification. Sending a notification with message is a
            generic way to send a push notification to any platform..
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushNotification.WindowsPhone">
            <summary>
            Specifies the push notification that will be sent to Windows Phone devices.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushNotification.Android">
            <summary>
            Specifies the push notification that will be sent to Android devices.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushNotification.iOS">
            <summary>
            Specifies the push notification that will be sent to iOS devices.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice">
            <summary>
            Represents a device registration for push notifications. A registration is a set of
            parameters, that can be used to filter the device when sending push notifications.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.HardwareId">
            <summary>
            The unique hardware ID of the device. Required.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.HardwareModel">
            <summary>
            The hardware model of the device, for example "Nokia Lumia 928". Optional.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.PlatformType">
            <summary>
            The software platform (operating system) that runs on the device. Required.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.PlatformVersion">
            <summary>
            The version of the software platform (operating system) that runs on the device. Required for Windows Phone devices.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.PushToken">
            <summary>
            The push token that can be used to send notifications to the device. This is usually obtained from the
            platform vendor by using some API.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.Locale">
            <summary>
            The language of user interface of the device. Optional.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.TimeZone">
            <summary>
            The time zone on the device.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.Parameters">
            <summary>
            Custom parameters for the registration. Those parameters can be used when targeting the push notifications.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.RawNotification">
            <summary>
            Specifies settings for a Windows Phone raw push notification.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.RawNotification.Payload">
            <summary>
            They payload for the raw notification.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification">
            <summary>
            Specifies settings for a Windows Phone tile push notification.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.TileId">
            <summary>
            The URI of the tile to update. Only used when updating secondary tiles. If null, the primary tile will be updated. Example: /MyLandingPage.xaml
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.Title">
            <summary>
            The title displayed on the front side of the tile.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.BackgroundImage">
            <summary>
            The image to use for background of the front side of the tile. Example: Images/MyImage.png
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.Count">
            <summary>
            The count value to show on the tile. Can be a value from 1 to 99.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.BackTitle">
            <summary>
            The title displayed on the back side of the tile.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.BackContent">
            <summary>
            The text displayed on the back side of the tile.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.BackBackgroundImage">
            <summary>
            The image to use for background of the back side of the tile. Example: Images/MyImage.png
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.SmallBackgroundImage">
            <summary>
            The image to use for the small tile. Supported from Windows Phone 7.8. Example: Images/MyImage.png
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.WideBackgroundImage">
            <summary>
            The image to use for the front side of the wide tile. Supported from Windows Phone 7.8. Example: Images/MyImage.png
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.WideBackBackgroundImage">
            <summary>
            
            The image to use for the back side of the wide tile. Supported from Windows Phone 7.8. Example: Images/MyImage.png
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.WideBackContent">
            <summary>
            The text displayed on the wide tile. Supported from Windows Phone 7.8.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.ToastNotification">
            <summary>
            Specifies settings for a Windows Phone toast push notification.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.ToastNotification.Title">
            <summary>
            The title(bold part) for the toast notification.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.ToastNotification.Message">
            <summary>
            The message for the toast notification.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.ToastNotification.LandingUri">
            <summary>
            Uri of the page to navigate when the toast is tapped. If null, the notification opens the main page.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.WindowsPhoneNotification">
            <summary>
            Contains settings for push notifications sent to Windows Phone devices.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.WindowsPhoneNotification.Tile">
            <summary>
            Settings for tile notification. If null, no tile notification will be sent.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.WindowsPhoneNotification.Toast">
            <summary>
            Settings for toast notification. If null, no toast notification will be sent.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.WindowsPhoneNotification.Raw">
            <summary>
            Settings for Raw notification. If null, no raw notification will be sent.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.ServerInfo.CurrentTime">
            <summary>
            The current date and time on the server.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.User">
            <summary>
            Represents the default user in Everlive. You can inherit from this class and define your custom user properties.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.Username">
            <summary>
            The username of the user.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.DisplayName">
            <summary>
            The display name of the user.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.Password">
            <summary>
            The user's password. This field is only used when creating a new user.
            It is not populated when you get a user from the server.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.SecretQuestion">
            <summary>
            The secret question for the user. Note, that this is usually the ID/index of the question, not the question itself.
            This field is only used when creating/updating a user, it is not populated when retrieving users.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.SecretAnswer">
            <summary>
            The answer to the secret question for the user. 
            This field is only used when creating/updating a user, it is not populated when retrieving users.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.RoleId">
            <summary>
            The ID of the user's role.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.Email">
            <summary>
            The email of the user. This email is used for reset password requests.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.IsVerified">
            <summary>
            Returns whether the user has verified the email address. This property is read-only and the server will ignore any changes made directly.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Query.EverliveQuery.SetSetting(System.String,System.Object)">
            <summary>
            Sets the value of the setting with the specified name.
            </summary>
            <param name="propertyName">The name of the setting.</param>
            <param name="value">The new value of the setting.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Query.EverliveQuery.GetSetting``1(System.String,``0)">
            <summary>
            Gets the value of the setting with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">The name of the setting.</param>
            <param name="defaultValue">The default value to return if the specified setting is not found.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Query.EverliveQuery.TryGetSetting``1(System.String,``0@)">
            <summary>
            Gets the value of the setting with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.EverliveQuery.ApiVersion">
            <summary>
            The Api version to use for the query. If null, the default ApiVersion for the request will be used.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.FieldSelection.CustomFieldSelection">
            <summary>
            A field selector implementation allowing custom JSON object to be used for field selection. Note, that the JSON object must
            comply with the Everlive REST API specification.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Query.Definition.FieldSelection.IFieldSelection.GetFieldSelectionObject">
            <summary>
            Returns the JSON object to send as field selector to the Everlive service.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.Definition.FieldSelection.ExpandField.FieldName">
            <summary>
            The name of the field to be returned from the server.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.Definition.FieldSelection.ExpandField.TypeName">
            <summary>
            The content type to query.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.Definition.FieldSelection.FieldSelection.SelectedFields">
            <summary>
            This property defines the fields that must be included/excluded in the response. You can either only exclude fields or only include fields.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.Definition.FieldSelection.FieldSelection.ExpandFields">
            <summary>
            Specifies expand fields. Expand fields are a way to fetch related data for each of the returned objects (e.g. expand its fields).
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.FieldSelection.SelectedField">
            <summary>
            Represents a field that must be included/excluded from the result of a request.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Array.ArrayConditionOperator">
            <summary>
            Filter operators used 
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Array.ArrayConditionOperator.ValueIsIn">
            <summary>
            Used for non-array fields only. True if the value of the field is contained in the specified array of values.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Array.ArrayConditionOperator.ValueIsNotIn">
            <summary>
            Used for non-array fields only. True if the value of the field is not contained in the specified array of values.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Array.ArrayConditionOperator.ArrayContainsAll">
            <summary>
            Used for array fields only. True if the value of the field contains all of the values in the specified array.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.CustomFilteringDefinition">
            <summary>
            A filter implementation allowing custom JSON object to be used for filtering. Note, that the JSON object must
            comply with the Everlive REST API specification.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.IFilteringDefinition.GetFilterObject">
            <summary>
            Returns the JSON object to send as filter to the Everlive service.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ValueEquals">
            <summary>
            True if the value equals the filter value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ValueNotEquals">
            <summary>
            True if the value is not equal to the filter value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ValueLesserThan">
            <summary>
            True if the value is lesser than the specified value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ValueLesserThanOrEqual">
            <summary>
            True if the value is less than or equal to the specified value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ValueIsOfType">
            <summary>
            True if the value in the field is of the specified type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ArrayIsOfSize">
            <summary>
            Used for array fields only. True if the size of the array matches the specified number.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.Definition.Paging.IncludeCount">
            <summary>
            Whether to include the count of all objects matching the query in the response.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.Sorting.CustomSortingDefinition">
            <summary>
            A sorting implementation allowing custom JSON object to be used for sorting. Note, that the JSON object must
            comply with the Everlive REST API specification.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Query.Definition.Sorting.ISortingDefinition.GetSortObject">
            <summary>
            Returns the JSON object to send as ordering to the Everlive service.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.Get.GetByFilterQuery.IncludeCount">
            <summary>
            Whether to include the count of all items in the result. Useful when paging is used.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.Update.UpdateByFilterQuery.Item">
            <summary>
            The item that will be updated.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.Update.UpdateByIdQuery.Item">
            <summary>
            The item that will be updated.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.BoolResult">
            <summary>
            Represents the result of a request that returns either true or false.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.ResultBase">
            <summary>
            A base class for representing results of Everlive service requests.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ResultBase.Success">
            <summary>
            Returns whether the request was successfully handled by the Everlive service.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ResultBase.Error">
            <summary>
            If Success is false, this contains the error that occured on the server.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ResultBase.AdditionalData">
            <summary>
            Contains any additional data sent in the response.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.CountResult">
            <summary>
            Represents the result of a count request to the Everlive service.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.ItemResult`1">
            <summary>
            Represents the result of a get request for a single item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.CountResult.ItemsCount">
            <summary>
            The count returned by the service.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.CreateMultipleResult">
            <summary>
            Represents the result of a create request containing multiple items.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.ItemsResult`1">
            <summary>
            Represents the result of a get request for many items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ItemsResult`1.Items">
            <summary>
            The items that were returned from the request.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.CreateSingleResult">
            <summary>
            Represents the result of a create request containing a single item.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.DeleteResult">
            <summary>
            Represents the result of a delete request.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.EmptyResult">
            <summary>
            Representing a result of an operation that returns no data.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.GetMultipleResult`1.Count">
            <summary>
            The count of all items that satisfy the query.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.GetSingleResult`1">
            <summary>
            Represents the result of a get request for a single item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.LoginResult">
            <summary>
            Represents the result of a login request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.LoginResult.Token">
            <summary>
            The access token returned as a result of the login request.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.RequestResult`1">
            <summary>
            A class that represents results of Everlive service requests.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.RequestResult`1.Success">
            <summary>
            Returns whether a result was obtained successfully.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.RequestResult`1.Error">
            <summary>
            If Success is false, this contains the error that occured.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.RequestResult`1.AdditionalData">
            <summary>
            Contains any additional data sent in the response.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.RequestResult`1.Value">
            <summary>
            The actual result of the request.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.ResultHolder`1">
            <summary>
            This class represents a result from the Everlive service. The service always returns the result of the request
            wrapped in an object. This object contains the result itself and may contain other data, depending on the type
            and settings of the request.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ResultHolder`1.Result">
            <summary>
            The result of the query.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ResultHolder`1.AdditionalData">
            <summary>
            This object contains any additional data sent with the response.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.StringResult">
            <summary>
            Represents the result of a get request for a single item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.UpdateResult">
            <summary>
            Represents the result of an update request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.UpdateResult.UpdatedItemsCount">
            <summary>
            The number of items that were updated by the update request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.UpdateResult.ModifiedAt">
            <summary>
            The server date when the items were modified.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Serialization.EverliveJsonConverter.GetFieldServerName(System.String,System.Type)">
            <summary>
            Returns the name of the server field for the specified property name and type.
            </summary>
            <param name="propertyName"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Serialization.ServerIgnoreAttribute">
            <summary>
            Specifies that the property should not be serialized
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Serialization.ServerPropertyAttribute.ReadFromServer">
            <summary>
            Specifies whether values coming from server are deserialised to the client.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Serialization.ServerPropertyAttribute.WriteToServer">
            <summary>
            Specifies whether values from the client are sent to the server.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Serialization.ServerTypeAttribute">
            <summary>
            This attribute is used to explicitly set properties for user generated classes which 
            correspond to Everlive Content Types
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Serialization.ServerTypeAttribute.ServerTypeName">
            <summary>
            The name of the Everlive Content Type.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Communicator.GetEverliveException(System.Exception,System.Net.HttpWebResponse@)">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Communicator.GetResponseBody(System.Net.WebResponse)">
            <summary>
            Reads the response body of a WebResponse object and returns it as a string.
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.EverliveException.Code">
            <summary>
            The error code returned from the Everlive service.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.EverliveException.ErrorType">
            <summary>
            The error code returned from the Everlive service transformed to an enum.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.GetResultAsObject``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.GetResultAsEnumerable``1">
            <summary>
            Returns the result
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.GetResultAsStronglyTyped(System.Type)">
            <summary>
            Returns the result of the response casted to the provided resultType, 
            so SelectQuery can return correct result
            </summary>
            <param name="resultType"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.GetAsObject``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.GetAsEnumerable``1">
            <summary>
            Returns the inner result
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.CreateSuccess``1(Telerik.Everlive.Sdk.Core.EverliveConnection,Telerik.Everlive.Sdk.Core.Transport.Request,System.Net.HttpWebResponse)">
            <summary>
            Creates an instance of Response representing a successful service call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="raw"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.CreateError``1(Telerik.Everlive.Sdk.Core.EverliveConnection,Telerik.Everlive.Sdk.Core.Transport.Request,Telerik.Everlive.Sdk.Core.Transport.EverliveException,System.Net.HttpWebResponse)">
            <summary>
            Creates an instance of Response representing a failed service call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="error"></param>
            <param name="raw"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.Request">
            <summary>
            The request that resulted in this response.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.Connection">
            <summary>
            The app that was used to make the request that resulted in the current response.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.WebResponse">
            <summary>
            The actual HttpWebResponse object.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.State">
            <summary>
            The state of the response.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.Success">
            <summary>
            Returns whether the request was successful.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.CompletedSynchronously">
            <summary>
            Returns whether the request was completed synchronously.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.ResponseString">
            <summary>
            The body of the response as a string.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.ResponseStream">
            <summary>
            The response as a stream.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.Error">
            <summary>
            The error that occured while processing the request.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.JsonResponse.GetResultAsObject``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.JsonResponse.GetResultAsEnumerable``1">
            <summary>
            Returns the result
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.JsonResponse.GetAsObject``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.JsonResponse.GetAsEnumerable``1">
            <summary>
            Returns the inner result
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Request.ApplyBodyForCreate(System.Object)">
            <summary>
            Sets the specified object as body of the request, using JSON serialization.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Request.ApplyBodyForUpdate(Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject)">
            <summary>
            Sets the specified object as body of the request, using JSON serialization.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Request.ApplyBodyForMultiUpdate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sets the specified object as body of the request, using JSON serialization.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.Connection">
            <summary>
            The EverliveConnection used to make the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.RootUrl">
            <summary>
            The root URL for invoking the Everlive service. No trailing slash. Example: https://api.everlive.com
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.Path">
            <summary>
            The path for the request. Example: Users/user_id_guid
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.Method">
            <summary>
            The HTTP method for the request e.g. GET, POST, etc.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.CustomPayloadDelegate">
            <summary>
            A delegate that will be invoked to supply custom body for the HTTP request. Can be null.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.Payload">
            <summary>
            The body of the request as stream.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.Headers">
            <summary>
            A collection of headers for the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.QueryParameters">
            <summary>
            A collection of query parameters sent with the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.ContentType">
            <summary>
            The content type used for the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.SynchronousResponse">
            <summary>
            This must be set whenever MustExecute is set to false. This response will be used when invoking the callback supplied by the caller.
            </summary>
        </member>
    </members>
</doc>
